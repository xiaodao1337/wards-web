name: Update DAU Data

on:
  schedule:
    # 每天 UTC 时间 00:00（北京时间 08:00）执行
    - cron: '0 0 * * *'
  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  update-dau:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install requests

    - name: Fetch DAU data from API
      env:
        API_URL: "http://103.91.208.25:5231/getonlines"
      run: |
        # 创建Python脚本来获取和处理数据
        cat > fetch_dau.py << 'EOF'
        import requests
        import json
        import os
        from datetime import datetime
        
        # 获取API URL
        api_url = os.environ.get('API_URL')
        history_file = 'dau-history.json'
        
        try:
            # 获取数据
            print(f"Fetching data from {api_url}...")
            response = requests.get(api_url, timeout=30)
            response.raise_for_status()
            data = response.json()
            
            # 提取total字段
            if 'total' in data:
                total_users = data['total']
                print(f"Total users: {total_users}")
                
                # 准备要保存的数据
                current_date = datetime.now().strftime("%Y-%m-%d")
                new_entry = {
                    "date": current_date,
                    "total_users": total_users,
                    "timestamp": datetime.now().isoformat()
                }
                
                # 读取现有的历史数据文件
                if os.path.exists(history_file):
                    with open(history_file, 'r', encoding='utf-8') as f:
                        history_data = json.load(f)
                else:
                    # 如果文件不存在，初始化数据结构
                    history_data = {
                        "data_source": api_url,
                        "update_frequency": "daily",
                        "last_updated": "",
                        "historical_data": []
                    }
                
                # 确保historical_data字段存在
                if "historical_data" not in history_data:
                    history_data["historical_data"] = []
                
                # 检查今天是否已经有数据，如果有则更新，否则添加
                found = False
                for entry in history_data["historical_data"]:
                    if "date" in entry and entry["date"] == current_date:
                        entry.update(new_entry)
                        found = True
                        break
                
                if not found:
                    history_data["historical_data"].append(new_entry)
                
                # 更新最后更新时间
                history_data["last_updated"] = datetime.now().isoformat()
                
                # 确保data_source和update_frequency字段存在
                if "data_source" not in history_data:
                    history_data["data_source"] = api_url
                if "update_frequency" not in history_data:
                    history_data["update_frequency"] = "daily"
                
                # 将结果写入文件
                with open(history_file, 'w', encoding='utf-8') as f:
                    json.dump(history_data, f, indent=2, ensure_ascii=False)
                
                print(f"Successfully updated data for {current_date}: {total_users} users")
            else:
                print("Error: 'total' field not found in API response")
                exit(1)
                
        except Exception as e:
            print(f"Error fetching data: {e}")
            import traceback
            traceback.print_exc()
            exit(1)
        EOF
        
        # 执行Python脚本
        python fetch_dau.py

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add dau-history.json
        git diff --staged --quiet || git commit -m "Update DAU data for $(date +'%Y-%m-%d')"
        git push
